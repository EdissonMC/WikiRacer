#include <iostream>     // for cout, cin
#include <fstream>      // for ifstream
#include <sstream>      // for stringstream
#include <unordered_set>
#include <vector>
#include <queue>
#include <unordered_map>
#include "wikiscraper.h"

using std::cout;            using std::endl;
using std::ifstream;        using std::stringstream;
using std::string;          using std::vector;
using std::priority_queue;  using std::unordered_map;
using std::unordered_set;   using std::cin;



template<typename T>
void print_queue(T& q) {


    while(!q.empty()) {

        std::vector <std::string> myVector= q.top();
        q.pop();

         std::cout<< "\n\n{ ";
           for(std::vector <std::string>::iterator itr = myVector.begin();
                            itr != myVector.end() ;
                            ++itr){

                          std::cout <<*itr<<" " <<std::endl;

            }
            std::cout<< " }\n\n";
    }

    std::cout << '\n';

}


 //WikiScraper myScraper;
//myScraper.getLinkSet(start_page);


/*
 * This is the function you will be implementing. It takes
 * two string representing the names of a start_page and
 * end_page and is supposed to return a ladder, represented
 * as a vector<string>, of links that can be followed from
 * start_page to get to the end_page.
 *
 * For the purposes of this algorithm, the "name" of a Wikipedia
 * page is what shows at the end of the URL when you visit that page
 * in your web browser. For ex. the name of the Stanford University
 * Wikipedia page is "Stanford_University" since the URL that shows
 * in your browser when you visit this page is:
 *
 *       https://en.wikipedia.org/wiki/Stanford_University
 */
vector<string> findWikiLadder(const string& start_page, const string& end_page) {
    // TODO: 1. Once your file reading is working, replace the below
    //          return statement with "return {};".
    //       2. Make sure that you've copied over your findWikiLinks method
    //          from Part A into wikiscraper.cpp.
    //       3. Finally, implement this function per Part B in the handout!
    //
    //                Best of luck!
    //"File reading works!", start_page, end_page

    WikiScraper myScraper;

    unordered_set <std::string>  startedLinks = myScraper.getLinkSet(start_page);
    unordered_set <std::string>  targetLinks  = myScraper.getLinkSet(end_page);



    /* CONVERTIR EL RESULTADO DE startedLinks EN UN VECTOR */
        vector<std::string> vectorConverter1;
        vectorConverter1.reserve(startedLinks.size());

        for ( unordered_set<string>::iterator  it = startedLinks.begin();
              it != startedLinks.end(); ++it )
        {
            vectorConverter1.push_back(*it);
        }
        vectorConverter1.push_back(start_page);

        vector <std::string>::iterator itrStartLinks  =  vectorConverter1.begin();
        vector <std::string>::iterator itrEndLinks    =  vectorConverter1.end()-1;
    /*  HASTA AQUI VA LA CONVERSION   */




    /* DEFINIMOS EL VECTOR QUE RETORNARA LA FUNCION*/
    std::vector<std::string> vectResult;
    std::string currentLink =start_page;





    /* FUNCION DE COMPARACION */
    auto compareFn = [&targetLinks] ( std::vector <std::string> vector1 ,  std::vector <std::string> vector2 ) {
      //  std::cout << "hello lambda" <<std::endl;

        std::vector <std::string>::iterator  itrStartVector1  =  vector1.begin();
        std::vector <std::string>::iterator  itrEndVector1    =  vector1.end();

        int counterLinksVector1=0;

         /* 1- COMPARA LOS LINKS VECTOR1  CON EL LINK TARGET */

            while (itrStartVector1 != itrEndVector1) {

               // std::cout << *itrStartLinks<<std::endl;

                    for(std::unordered_set <std::string>::iterator itrTarget = targetLinks.begin();
                            itrTarget != targetLinks.end() ;
                            ++itrTarget)
                    {

                           if(*itrStartVector1 == *itrTarget)  {
                                counterLinksVector1++;
                           }

                    }


               ++itrStartVector1;
            }

        /* 1- FIN DE LA COMPARACION DE LINKS VECTOR1 */





         /* 2- COMPARA LOS LINKS VECTOR2  CON EL LINK TARGET */
             std::vector <std::string>::iterator  itrStartVector2  =  vector2.begin();
            std::vector <std::string>::iterator  itrEndVector2    =  vector2.end();

            int counterLinksVector2=0;
            while (itrStartVector2 != itrEndVector2) {

               // std::cout << *itrStartLinks<<std::endl;

                    for(std::unordered_set <std::string>::iterator itrTarget = targetLinks.begin();
                            itrTarget != targetLinks.end() ;
                            ++itrTarget)
                    {

                           if(*itrStartVector2 == *itrTarget)  {
                                counterLinksVector2++;
                           }

                    }

                ++itrStartVector2;

            }

        /* 2- FIN DE LA COMPARACION DE LINKS VECTOR2 */




         return (counterLinksVector1 ) < ( counterLinksVector2 );
    };
    /* FIN DE LA FUNCION DE COMPARACION*/









    /* CREAMOS LA PRIORITY QUEUE */
       std::priority_queue< std::vector<std::string>,
                            std::vector< std::vector<std::string> >,
                            decltype(compareFn)  >     ladderQueue(compareFn);







    /* COMPARACION GENERAL DE PAGINAS */
       std::string dato="";


    std::cout << "\n>CONTINUADOR : ......\n" << std::endl;

    while (getline(std::cin, dato),  dato=="2") {
      // while(true){

        std::cout << "\n>ANALISIS DE NUEVA PAGINA ......\n" << std::endl;


        vectResult.push_back( currentLink );



        /* 1-STAGE-> COMPARA LOS LINKS ACTUALES CON EL LINK TARGET */

             std::vector<std::string> vectorTemporal;

            while (itrStartLinks != itrEndLinks) {

                std::cout << "Comparando " << *itrStartLinks <<"  con : "<< end_page <<std::endl;

                if (*itrStartLinks  ==  end_page) {

                    std::cout <<"ENCONTRADO EN LA PRIMERA PAGINA"<< *itrStartLinks<<std::endl;
                   // std::string result=  *itrStartLinks;

                    return vectResult;

                }else{

                    vectorTemporal.push_back(*itrStartLinks);


                }

                itrStartLinks++;
            }
        /* 1- FIN DE LA COMPARACION DE LINKS */




          std::cout << "\n NINGUN LINK HIZO MACH con  ....\n" << currentLink << std::endl;


        /* 2-STAGE-> AGREGAR EL VECTOR A LA PRIORITY QUEUE */

          std::cout << "\n INICIANDO DE NUEVO LA LECTURA DE LINKS DE CAD LINK  DE LA PAGINA ACTUAL  ......\n" << std::endl;

            /* RECORRER EL VECTOR PARA EXTRAER LOS LINKS DE CADA LINK*/
            for (std::vector<std::string>::iterator itrVec = vectorTemporal.begin() ;
                   itrVec != vectorTemporal.end()  ;
                   ++itrVec)
            {


                    /* CREAMOS UN UNORDERED SET PARA ALMACENAR LO LINKS */
                        unordered_set<string> queryLinks;



                    /* EXTRACCION DE LINKS */
                        queryLinks =  myScraper.getLinkSet(*itrVec);



                    /* CONVERTIR EL RESULTADO EN UN VECTOR */
                       vector<std::string> vectorConverter;
                       vectorConverter.reserve(queryLinks.size());
                        std::cout<<"\n\n { "  << std::endl ;
                       for ( unordered_set<string>::iterator  it = queryLinks.begin();
                             it != queryLinks.end(); ++it )
                       {
                           vectorConverter.push_back(*it);
                            std::cout <<*it<<" " <<std::endl;
                       }
                           std::cout<<"\n }  \n \n"  << std::endl ;


                    /* GUARDAMOS EN LA ULTIMA PARTE EL NOMBRE DE LINK */
                     //   vectorConverter.push_back( *itrVec );


                    /*  ASIGNAR A LA PRIORITY QUEUE  */
                       ladderQueue.push(vectorConverter);



            }  /* FIN - RECORRER EL VECTOR PARA EXTRAER LOS LINKS DE CADA LINK*/



            //std::priority_queue <std::string>:: pointerStart= ladderQueue.






            std::cout << "\n\n> TERMINE DE IMPRIMIR TODA LA PRIORITY QUEUE ......\n\n" << std::endl;
            std::vector<string> auxVect = ladderQueue.top();

//            currentLink    =  auxVect.back();
//             std::cout << "EL LINK DE LA NUEVA PAGIN ES  :"<< currentLink <<std::endl ;

            itrStartLinks  =  auxVect.begin();
            itrEndLinks    =  auxVect.end();

         /* 2- FIN 2-STAGE */

            std::cout << "\n\n>CONTINUADOR : ......\n" << std::endl;


    }// FIND while(true)





    //compareFn();



//   std::priority_queue<vector<string>,
//                        vector<vector<string>>,
//                                    decltype(cmpFn)> ladderQueue(cmpFn);




    return {};
    
    
} //End findWikiLadder













int main() {
    /* Container to store the found ladders in */
    vector< vector<string> > outputLadders;

    std::cout << "probando";
//    WikiScraper myScraper;
//    unordered_set <std::string> targetLinks = myScraper.getLinkSet("Republic_of_Colombia");

//    for ( std::unordered_set<std::string> ::iterator itr= targetLinks.begin()  ; itr != targetLinks.end() ; ++itr ) {
//                std::cout << *itr <<std::endl;
//        }



//    cout << "Enter a file name: ";
//    string filename;
//    getline(cin, filename);

    // TODO: Create a filestream from the filename.
    //       For each pair {start_page, end_page} in the input file,
    //       retrieve the result of findWikiLadder(start_page, end_page)
    //       and append that vector to outputLadders.


    // Write code here
//    std::string start_page  =  "Ibagué"   ; // "Fruit"       ; //"Ibagué";
//    std::string end_page    =  "Cundinamarca_Department_(1820)" ; //Strawberry"  ; // "Cundinamarca_Department_(1820)";

//    std::string start_page  =  "Fruit"   ; // "Fruit"       ; //"Ibagué";
//    std::string end_page    =  "Strawberry" ; //Strawberry"  ; // "Cundinamarca_Department_(1820)";

//    std::string start_page  =  "Rioblanco"   ; // "Fruit"       ; //"Ibagué";
//    std::string end_page    =  "Tolima_Department" ; //Strawberry"  ; // "Cundinamarca_Department_(1820)";

    std::string start_page  =  "Rioblanco"   ; // "Fruit"       ; //"Ibagué";
    std::string end_page    =  "Tolima_(disambiguation)" ; //Strawberry"  ; // "Cundinamarca_Department_(1820)";


    vector<string> myResult=   findWikiLadder(start_page, end_page);

    std::cout <<"\n\nMOSTRANDO LA ESCALERA" <<std::endl;

    for ( std::vector<std::string>::iterator itr= myResult.begin()  ; itr != myResult.end() ; ++itr ) {
                   std::cout << *itr <<std::endl;
     }


    /*
     * Print out all ladders in outputLadders.
     * We've already implemented this for you!
     */


//    for (auto& ladder : outputLadders) {
//        if(ladder.empty()) {
//            cout << "No ladder found!" << endl;
//        } else {
//            cout << "Ladder found:" << endl;
//            cout << "\t" << "{";

//            std::copy(ladder.begin(), ladder.end() - 1,
//                      std::ostream_iterator<string>(cout, ", "));
//            /*
//             * The above is an alternate way to print to cout using the
//             * STL algorithms library and iterators. This is equivalent to:
//             *    for (size_t i = 0; i < ladder.size() - 1; ++i) {
//             *        cout << ladder[i] << ", ";
//             *    }
//             */
//            cout << ladder.back() << "}" << endl;
//        }
//    }


    return 0;
}



/*

Richard Nixon → 
List of Presidents of the United States → 
United States Armed Forces → 
United States →
North America → 
South America → 
Guyana → 
Jonestown
*/

/*
Sodium → 
Soap → 
Catalysis 
*/



